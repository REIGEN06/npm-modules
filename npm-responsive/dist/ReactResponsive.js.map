{"version":3,"file":"ReactResponsive.js","sources":["../src/useMediaQuery.ts","../src/MediaQuery.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\ntype UseQueryTypes = {\r\n  query: string;\r\n};\r\n\r\nexport const useMediaQuery = (query: UseQueryTypes): boolean => {\r\n  const [state, setState] = useState(\r\n    () => window.matchMedia(query.query).matches\r\n  );\r\n\r\n  useEffect(() => {\r\n    const MediaQueryHandle = () => {\r\n      setState(() => window.matchMedia(query.query).matches);\r\n    };\r\n\r\n    const mediaQueryList = window.matchMedia(query.query);\r\n\r\n    mediaQueryList.addEventListener(\"change\", MediaQueryHandle);\r\n    return () => {\r\n      mediaQueryList.removeEventListener(\"change\", MediaQueryHandle);\r\n    };\r\n  }, [query]);\r\n  return state;\r\n};","import { ReactNode } from \"react\";\r\nimport React from \"react\";\r\nimport { useMediaQuery } from \"./useMediaQuery\";\r\ntype UseQueryTypes = {\r\n  query: string;\r\n};\r\n\r\ninterface QueryTypes {\r\n  orientation?: \"portrait\" | \"landscape\";\r\n  minResolution?: number | `${number}dppx`;\r\n  maxResolution?: number | `${number}dppx`;\r\n  minWidth?: number | `${number}px`;\r\n  maxWidth?: number | `${number}px`;\r\n  minHeight?: number | `${number}px`;\r\n  maxHeight?: number | `${number}px`;\r\n}\r\n\r\ndeclare type RequireAtLeastOne<T> = {\r\n  [K in keyof T]-?: Required<Pick<T, K>> &\r\n    Partial<Pick<T, Exclude<keyof T, K>>>;\r\n}[keyof T];\r\n\r\ntype MediaQueryProps = RequireAtLeastOne<QueryTypes> & {\r\n  children: ReactNode | ((matches: boolean) => ReactNode);\r\n};\r\n\r\nfunction makeMediaQuery(props: { [key: string]: string | number }): string {\r\n  function parseToLowerCase(string: string) {\r\n    return string.replace(/(?<=[a-z])(?=[A-Z])/g, \"-\").toLowerCase();\r\n  }\r\n\r\n  return Object.entries(props)\r\n    .map(([key, value], index) => {\r\n      switch (key) {\r\n        case \"orientation\":\r\n          return `(${key}:${value})`;\r\n        case \"minResolution\":\r\n        case \"maxResolution\":\r\n          return typeof value === \"number\"\r\n            ? `(${parseToLowerCase(key)}: ${value}dppx)`\r\n            : `(${parseToLowerCase(key)}: ${value})`;\r\n        default:\r\n          return typeof value === \"number\"\r\n            ? `(${parseToLowerCase(key)}: ${value}px)`\r\n            : `(${parseToLowerCase(key)}: ${value})`;\r\n      }\r\n    })\r\n    .join(\"\");\r\n}\r\n\r\nexport const MediaQuery = ({ children, ...props }: MediaQueryProps) => {\r\n  const newQuery = useMediaQuery({ query: makeMediaQuery(props) });\r\n\r\n  return typeof children === \"function\" ? (\r\n    <>{children(newQuery)}</>\r\n  ) : newQuery ? (\r\n    <>{children}</>\r\n  ) : null;\r\n};\r\n"],"names":["useMediaQuery","query","_useState","useState","window","matchMedia","matches","state","setState","useEffect","MediaQueryHandle","mediaQueryList","addEventListener","removeEventListener","makeMediaQuery","props","parseToLowerCase","string","replace","toLowerCase","Object","entries","map","_ref","index","key","value","join","_ref2","children","_objectWithoutPropertiesLoose","_excluded","newQuery","h","Fragment"],"mappings":"uBAKaA,EAAgB,SAACC,GAC5B,IAAAC,EAA0BC,EAAAA,SACxB,WAAM,OAAAC,OAAOC,WAAWJ,EAAMA,OAAOK,OAAO,GADvCC,EAAKL,EAAEM,GAAAA,EAAQN,EAItBO,GAYA,OAZAA,EAASA,UAAC,WACR,IAAMC,EAAmB,WACvBF,EAAS,WAAM,OAAAJ,OAAOC,WAAWJ,EAAMA,OAAOK,OAAO,EACvD,EAEMK,EAAiBP,OAAOC,WAAWJ,EAAMA,OAG/C,OADAU,EAAeC,iBAAiB,SAAUF,GACnC,WACLC,EAAeE,oBAAoB,SAAUH,EAC/C,CACF,EAAG,CAACT,IACGM,CACT,iBCGA,SAASO,EAAeC,GACtB,SAASC,EAAiBC,GACxB,OAAOA,EAAOC,QAAQ,uBAAwB,KAAKC,aACrD,CAEA,OAAOC,OAAOC,QAAQN,GACnBO,IAAI,SAAAC,EAAeC,GAAb,IAAAC,EAAGF,KAAEG,EAAKH,EACf,GAAA,OAAQE,GACN,IAAK,cACH,MAAA,IAAWA,EAAOC,IAAAA,EACpB,IAAA,IAAK,gBACL,IAAK,gBACH,MAAwB,iBAAVA,EACNV,IAAAA,EAAiBS,GAASC,KAAAA,cAC1BV,EAAiBS,GAAI,KAAKC,EAAK,IACzC,QACE,MAAwB,iBAAVA,MACNV,EAAiBS,GAAI,KAAKC,EAC1BV,MAAAA,IAAAA,EAAiBS,QAASC,EAAK,IAE7C,GACCC,KAAK,GACV,oBAE0B,SAAHC,OAAMC,EAAQD,EAARC,SAAad,oIAAKe,CAAAF,EAAAG,GACvCC,EAAWhC,EAAc,CAAEC,MAAOa,EAAeC,KAEvD,MAA2B,mBAAbc,EACZI,EAAAC,SAAGL,KAAAA,EAASG,IACVA,EACFC,EAAAC,cAAGL,GACD,IACN"}